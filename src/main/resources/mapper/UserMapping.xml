<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.learn.sportplan.dao.UserDao">
    <!--  根据string类的role映射为Role对象  -->
    <resultMap id="mainMap" type="com.learn.sportplan.bean.User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="email" property="email"/>
        <result column="role" property="role"/>
        <result column="state" property="state"/>
        <collection property="roleList" column="role" select="getRole" ofType="com.learn.sportplan.bean.Role"/>
<!--        <association property="role" select="getRole" column="role"/>-->
    </resultMap>

    <resultMap id="roleMap" type="com.learn.sportplan.bean.Role">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="remark" property="remark"/>
        <collection property="menus" column="id" select="getMenu" ofType="com.learn.sportplan.bean.MainMenu"/>
        <collection property="permissions" column="id" select="getPermission" ofType="com.learn.sportplan.bean.Permission"/>
    </resultMap>

    <!--  根据String类型的role查询role获得id name remark  -->
    <select id="getRole" parameterType="java.lang.String" resultMap="roleMap">
        SELECT * FROM role WHERE remark = #{role}
    </select>

    <!--  根据role的id查询roles_permissions获得role对应的权限列表  -->
    <select id="getPermission" parameterType="int" resultType="com.learn.sportplan.bean.Permission">
        SELECT p.* FROM permission p JOIN roles_permissions a ON p.id = a.permission_id WHERE a.role_id = #{id}
    </select>

    <resultMap id="menuMap" type="com.learn.sportplan.bean.MainMenu">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="path" property="path"/>
        <result column="icon" property="icon"/>
        <collection property="subList" ofType="com.learn.sportplan.bean.SubMenu">
            <id column="sid" property="id"/>
            <result column="stitle" property="title"/>
            <result column="spath" property="path"/>
            <result column="sicon" property="icon"/>
            <result column="scomponent" property="component"/>
        </collection>
    </resultMap>

    <!--  根据role的id查询roles_menus获得role对应的资源列表  -->
    <select id="getMenu" parameterType="int" resultMap="menuMap">
        SELECT mm.*, sm.id as sid, sm.title as stitle, sm.path as spath, sm.icon as sicon, sm.component as scomponent FROM
        mainmenu mm JOIN submenu sm ON mm.id=sm.mid
        <if test="id != null">
            WHERE sm.id IN (SELECT menu_id FROM roles_menus c WHERE c.role_id = #{id})
        </if>
    </select>

    <!--  使用getUserByMessage语句 接收username password参数 返回UserBean  -->
    <select id="getUserByMessage" resultMap="mainMap">
        SELECT * FROM `easyuser` WHERE
        username=#{username} AND password=#{password} AND state = 1
    </select>

    <!--  根据username查询 非模糊查询  -->
    <select id="getUserByUsername" resultMap="mainMap">
        SELECT * FROM `easyuser` WHERE username=#{username}
    </select>

    <select id="getAllUser" resultMap="mainMap">
        SELECT * FROM `easyuser`
        <!--    动态SQL 根据username进行模糊查询 非必须    -->
        <if test="username != null  and username.length > 0">
            WHERE username like concat('%', #{username}, '%')
        </if>
    </select>

    <select id="getUserCounts" resultType="java.lang.Integer">
        SELECT count(*) FROM `easyuser`
        <if test="username != null">
            WHERE username like #{username}
        </if>
    </select>

    <select id="getUserById" resultMap="mainMap">
        SELECT * FROM `easyuser` WHERE id=#{id}
    </select>

    <update id="updateState">
        UPDATE `easyuser` SET state = #{state} WHERE id = #{id}
    </update>

    <insert id="addUser">
        INSERT INTO `easyuser`
        (username, password, email, role, state)
        VALUE
        (#{username}, #{password}, #{email}, #{role}, #{state})
    </insert>

    <update id="updateUser">
        UPDATE `easyuser` SET
        <set>
            <if test="username != null">
                username=#{username},
            </if>
            <if test="password != null">
                password=#{password},
            </if>
            <if test="email != null">
                email=#{email}
            </if>
        </set>
        WHERE id=#{id}
    </update>

    <update id="updateRole">
        UPDATE `easyuser` SET role=#{role} WHERE id=#{id}
    </update>

    <delete id="deleteUser">
        DELETE FROM `easyuser` WHERE id=#{id}
    </delete>
</mapper>